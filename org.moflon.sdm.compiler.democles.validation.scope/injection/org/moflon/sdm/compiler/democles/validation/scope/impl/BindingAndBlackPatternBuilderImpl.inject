
import java.util.List;
import org.gervarro.democles.common.Adornment;
import org.moflon.sdm.runtime.democles.VariableReference;
import org.moflon.sdm.compiler.democles.validation.scope.impl.PatternMatcherImpl;

partial class BindingAndBlackPatternBuilderImpl {



@model buildActionInSuperClass (CFNode node) <--

      super.buildAction(node);
-->

@model buildPatternContent (RegularPatternInvocation invocation, StoryPattern storyPattern) <--

      assert invocation.getParameters().size() == invocation.getPattern().getSymbolicParameters().size();
      List<VariableReference> parameters = invocation.getParameters();
      int[] bindings = new int[parameters.size()];
      for (int i = 0; i < parameters.size(); i++)
      {
         bindings[i] = parameters.get(i).isFree() ? Adornment.FREE : Adornment.BOUND;
      }
      Adornment adornment = PatternMatcherImpl.getBodyAdornment(invocation.getPattern(), new Adornment(bindings));
      for (RegularPatternInvocationBuilder childBuilder : getChildBuilders())
      {
         adornment = processChildPattern(childBuilder, invocation, storyPattern, adornment);
      }
-->

@model calculateNextAdornment (Pattern pattern, Adornment adornment, PatternInvocationConstraint patternInvocationConstraint) <--

      return PatternMatcherImpl.getNextAdornment(pattern, adornment, patternInvocationConstraint);
-->

@model calculatePatternInvocationAdornment (Pattern pattern, Adornment adornment, PatternInvocationConstraint patternInvocationConstraint) <--

      return PatternMatcherImpl.getOperationAdornment(pattern, adornment, patternInvocationConstraint);
-->

}