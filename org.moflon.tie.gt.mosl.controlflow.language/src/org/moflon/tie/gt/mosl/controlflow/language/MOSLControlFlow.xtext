grammar org.moflon.tie.gt.mosl.controlflow.language.MOSLControlFlow with org.eclipse.xtext.common.Terminals

generate moslControlFlow "http://www.moflon.org/gt/mosl/controlflow/language/MOSLControlFlow"
import "http://www.emoflon.org/ibex/gt/editor/GT" as ibexPattern
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GraphTransformationControlFlowFile:
  imports+=Import*
  includedPatterns+=IncludePattern*
  'package' name=QualifiedName
  eClasses+=EClassDef*;

  // EMF Connections
EPackage returns ecore::EPackage:
  GraphTransformationControlFlowFile;

ETypedElement returns ecore::ETypedElement:
  ObjectVariableStatement;

EOperation returns ecore::EOperation:
  MethodDec;

EParameter returns ecore::EParameter:
  MethodParameter;

EnumExpression:
  'enum::' literal=[ecore::EEnumLiteral];

EClassDef:
  'class' name=[ecore::EClass|QualifiedName] '{'
  operations+=MethodDec*
  '}';

MethodDec:
  'operation' name=ID '(' (eParameters+=MethodParameter)? (',' eParameters+=MethodParameter)* ')' ':'
  (eType=[ecore::EClassifier|QualifiedName] | 'void') ('{'
  startStatement=Statement?
  '}')?;

CalledPatternParameter:
  (parameter=CalledPatternParameterName) '=' object=[TypedElement|QualifiedName] | create=ObjectVariableStatement;

CalledPatternParameterName:
  name=ID;

ObjectVariableStatement:
  (op=Operator)? name=ID ':' eType=[ecore::EClass|QualifiedName]
  (':=' assignment=[ObjectVariableStatement|QualifiedName])?;

Statement:
  NextStatement | ReturnStatement;

NextStatement:
  (PatternStatement | ConditionContainingStatement | ObjectVariableStatement | OperationCallStatement)
  (next=Statement)?;

PatternStatement:
  patternReference=PatternReference
  '(' (parameters+=CalledPatternParameter)? (',' parameters+=CalledPatternParameter)* ')';

ConditionStatement:
  'if' '(' cond=Condition ')' '{' thenStartStatement=Statement? '}'
  ('else' '{' elseStartStatement=Statement? '}')?;

OperationCallStatement:
  object=[ObjectVariableStatement|ID] '.' call=[ecore::EOperation] '(' (parameters+=OperationCallStatementParameter
  (',' parameters+=OperationCallStatementParameter)*)? ')';

OperationCallStatementParameter:
  (object=[ObjectVariableStatement|ID]) | literal=LiteralExpression;

Condition:
  patternReference=PatternReference '(' (parameters+=CalledPatternParameter)? (',' parameters+=CalledPatternParameter)*
  ')';

PatternReference:
  pattern=[ibexPattern::EditorPattern];

ConditionContainingStatement:
  ConditionStatement | LoopStatement;

LoopStatement:
  DoLoopStatement | WhileLoopStatement | ForLoopStatement;

WhileLoopStatement:
  'while' '(' cond=Condition ')' '{'
  loopStartStatement=Statement?
  '}';

DoLoopStatement:
  'do' '{'
  loopStartStatement=Statement?
  '}' 'while' '(' cond=Condition ')';

ForLoopStatement:
  'for' '('
  cond=Condition
  ')' '{'
  loopStartStatement=Statement?
  '}';

ReturnStatement:
  {ReturnStatement} 'return' (obj=ReturnObject)?;

ReturnObject:
  (ObjectVariableAttributeExpression | LiteralExpression | ObjectVariableExpression | EnumExpression);

ObjectVariableExpression:
  obj=[ObjectVariableStatement|ID];

ObjectVariableAttributeExpression:
  variable=[ObjectVariableStatement|ID] '.' attribute=[ecore::EAttribute];

MethodParameter:
  name=ID ':' eType=[ecore::EClassifier|QualifiedName];

MethodTypeName returns ecore::EString:
  'void' | QualifiedName;

Operator:
  value=OPERATOR_VALUE;

/* ---------------- */
/*    Auxiliaries   */
/* ---------------- */
IncludePattern:
  'using' importURI=STRING;

Import:
  'import' name=STRING;

Using:
  'using' importedNamespace=QualifiedNameWithWildcard;

terminal OPERATOR_VALUE:
  '++' | '!' | '--';

terminal INTEGER returns ecore::EInt:
  '-'? INT;

terminal DOUBLE returns ecore::EDouble:
  '-'? INT '.' INT;

terminal NULL:
  'null';

LiteralValue:
  (INTEGER | DOUBLE | BOOL | NULL);

terminal BOOL returns ecore::EBoolean:
  'true' | 'false';

QualifiedNameWithWildcard:
  QualifiedName '.*';

QualifiedName returns ecore::EString:
  ID ('.' ID)*;

  //additional connections
TypedElement:
  (ObjectVariableStatement | MethodParameter);

CalledParameter:
  CalledPatternParameter | OperationCallStatementParameter;

LiteralExpression:
  val=LiteralValue | {StringConstant} val=STRING;
