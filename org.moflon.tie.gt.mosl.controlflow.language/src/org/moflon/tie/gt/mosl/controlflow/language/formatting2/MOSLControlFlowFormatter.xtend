/*
 * generated by Xtext 2.12.0
 */
package org.moflon.tie.gt.mosl.controlflow.language.formatting2

import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.moflon.tie.gt.mosl.controlflow.language.moslControlFlow.ConditionStatement
import org.moflon.tie.gt.mosl.controlflow.language.moslControlFlow.EClassDef
import org.moflon.tie.gt.mosl.controlflow.language.moslControlFlow.GraphTransformationControlFlowFile
import org.moflon.tie.gt.mosl.controlflow.language.moslControlFlow.LoopStatement
import org.moflon.tie.gt.mosl.controlflow.language.moslControlFlow.MethodDec

class MOSLControlFlowFormatter extends AbstractFormatter2 {

  static final String BRACE_LEFT = "{"
  static final String BRACE_RIGHT = "}"
  static final String COMMA = ","

  def dispatch void format(GraphTransformationControlFlowFile gtcff, extension IFormattableDocument document) {
    gtcff.imports.forEach[it.append[newLine]]
    gtcff.includedPatterns.forEach[it.append[newLine]]
    gtcff.EClasses.forEach[it.format(document)]
  }

  def dispatch void format(EClassDef eclassDef, extension IFormattableDocument document) {
    eclassDef.regionFor.keyword("class").prepend[newLines = 2]
    eclassDef.regionFor.keyword(BRACE_LEFT).append[newLine]
    eclassDef.regionFor.keyword(BRACE_RIGHT).prepend[newLines = 2]

    val body = eclassDef.regionFor.keywordPairs(BRACE_LEFT, BRACE_RIGHT)
    for (var i = 0; i < body.size; i++)
      body.get(i).interior[indent]

    eclassDef.operations.forEach[it.format(document)]
  }

  def dispatch void format(MethodDec method, extension IFormattableDocument document) {
    method.EParameters.forEach[param|param.regionFor.keyword(COMMA).append[oneSpace]]
    method.regionFor.keyword(BRACE_LEFT).append[newLine]
    method.regionFor.keyword(BRACE_RIGHT).append[newLines = 2]

    // Indent everything between "{" and "}".
    val body = method.regionFor.keywordPairs(BRACE_LEFT, BRACE_RIGHT)
    for (var i = 0; i < body.size; i++)
      body.get(i).interior[indent]

    method.statements.forEach[it.format(document)]
  }

  def dispatch void formatStatement(LoopStatement loopStatement, extension IFormattableDocument document) {
    loopStatement.regionFor.keyword(BRACE_LEFT).append[newLine]
    loopStatement.regionFor.keyword(BRACE_RIGHT).append[newLine]

    val body = loopStatement.regionFor.keywordPairs(BRACE_LEFT, BRACE_RIGHT)
    for (var i = 0; i < body.size; i++)
      body.get(i).interior[indent]

    loopStatement.loopStatements.forEach[it.format(document)]
  }

  def dispatch void formatStatement(ConditionStatement stmnt, extension IFormattableDocument document) {
    stmnt.regionFor.keyword(BRACE_LEFT).append[newLine]
    stmnt.regionFor.keyword(BRACE_RIGHT).append[newLine]

    val body = stmnt.regionFor.keywordPairs(BRACE_LEFT, BRACE_RIGHT)
    for (var i = 0; i < body.size; i++)
      body.get(i).interior[indent]

    stmnt.thenStatements.forEach[it.format(document)]

    stmnt.regionFor.keyword(BRACE_LEFT).append[newLine]
    stmnt.regionFor.keyword(BRACE_RIGHT).append[newLine]

    stmnt.elseStatements.forEach[it.format(document)]
  }

}
