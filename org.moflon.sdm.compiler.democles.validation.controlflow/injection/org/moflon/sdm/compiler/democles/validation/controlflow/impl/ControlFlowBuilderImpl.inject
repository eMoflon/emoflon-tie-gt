
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import org.moflon.sdm.compiler.democles.validation.result.Severity;

partial class ControlFlowBuilderImpl {

@members <--

   private static final Comparator<Edge> EDGE_COMPARATOR = new Comparator<Edge>() {
      @Override
      public final int compare(Edge edge1, Edge edge2)
      {
         int typeDiff = edge1.getType().getValue() - edge2.getType().getValue();
         if (typeDiff == 0)
         {
            return edge1.getSource().getPreTraversal() - edge2.getSource().getPreTraversal();
         }
         return typeDiff;
      }
   };
   
-->

@model findLargestBackwardEdgeInterval (Node node, Node root) <--

      final Validator validator = getValidator();
      final ValidationReport report = validator.getValidationReport();

      final ArrayList<Edge> incomingEdges = new ArrayList<Edge>(node.getIncoming());
      Collections.sort(incomingEdges, EDGE_COMPARATOR);
      final SubTreeTester tester = ControlflowFactory.eINSTANCE.createSubTreeTester();
      tester.setIncludeRoot(true);
      tester.setRoot(root);

      Edge edge = null;
      Edge prevEdge = null;
      for (int i = 0; i < incomingEdges.size(); i++)
      {
         final Edge edgeCandidate = incomingEdges.get(i);
         final Node edgeCandidateSource = edgeCandidate.getSource();
         if (edgeCandidate.getType() == EdgeType.BACKWARD_EDGE && tester.isInSubTree(edgeCandidateSource))
         {
            prevEdge = edge;
            edge = edgeCandidate;
            if (prevEdge != null && (edge.getSource().getPreTraversal() <= prevEdge.getSource().getPreTraversal()
                  || edge.getSource().getPostTraversal() >= prevEdge.getSource().getPostTraversal()))
            {
               final ErrorMessage reportEmbeddedStructure = ResultFactory.eINSTANCE.createErrorMessage();
               report.getErrorMessages().add(reportEmbeddedStructure);
               reportEmbeddedStructure.setSeverity(Severity.ERROR);
               reportEmbeddedStructure.setId(validator.lookupErrorMessage(Errors.EMBEDDED_LOOP_FOUND));
               reportEmbeddedStructure.getLocation().add(prevEdge.getOrigin());
               reportEmbeddedStructure.getLocation().add(edge.getOrigin());
            }
         }
      }
      if (edge == null)
      {
         final ErrorMessage internalError = ResultFactory.eINSTANCE.createErrorMessage();
         report.getErrorMessages().add(internalError);
         internalError.setSeverity(Severity.FATAL);
         internalError.setId(validator.lookupErrorMessage(Errors.LOOP_EXTERN_EDGE));
         internalError.getLocation().add(node.getOrigin());
      }
      return edge;
-->

}