
import java.util.Comparator;
import org.moflon.core.utilities.WorkspaceHelper;

partial class ValidatorImpl {



@model lookupErrorMessage (Errors errorID) <--
      if (Errors.EXACTLY_ONE_START_NODE == errorID)
      {
         return "Exactly one start node";
      } else if (Errors.AT_LEAST_ONE_STOP_NODE == errorID)
      {
         return "At least one stop node";
      } else if (Errors.NO_OUTGOING_EDGE_FROM_STOP_NODE == errorID)
      {
         return "No outgoing edge from stop node";
      } else if (Errors.ACTIVITY_EDGE_END_NODES_IN_SAME_ACTIVITY == errorID)
      {
         return "Activity edge end nodes in same activity";
      } else if (Errors.FOR_EACH_EDGE_FORWARD == errorID)
      {
         return "Invalid ForEach edge (This might be a bug in the control flow validation. Please report here: " + WorkspaceHelper.ISSUE_TRACKER_URL + ".)";
      } else if (Errors.ONE_EDGE_BACK_FROM_FOREACH_COMPONENT == errorID)
      {
         return "At least one edge must lead from a ForEach component to the corresponding ForEach node";
      } else if (Errors.NO_EDGE_OUT_OF_FOREACH_COMPONENT == errorID)
      {
         return "A cycle represented by a ForEach component must always end in the corresponding ForEach node";
      } else if (Errors.NO_STOP_NODE_IN_FOREACH_COMPONENT == errorID)
      {
         return "Stop nodes in ForEach components are disallowed";
      } else if (Errors.MAX_TWO_OUTGOING_EDGES == errorID)
      {
         return "An activity node can have at most two outgoing edges";
      } else if (Errors.NODE_HAS_TO_HAVE_OUTGOING_EDGE == errorID)
      {
         return "Each activity node must have at least one outgoing edge";
      } else if (Errors.NO_INCOMING_EDGE_INTO_START_NODE == errorID)
      {
         return "Incoming edges into a start node are disallowed";
      } else if (Errors.ONE_OUTGOING_EDGE_FROM_START_NODE == errorID)
      {
         return "Only one unguarded outgoing edge from a start node is allowed";
      } else if (Errors.ONLY_ONE_EACH_TIME_EDGE == errorID)
      {
         return "Only one EachTime edge from a ForEach node is allowed";
      } else if (Errors.FOR_EACH_FALSE_OUTGOING_EDGE == errorID)
      {
         return "A ForEach node has exactly one End edge and at most one EachTime edge";
      } else if (Errors.FOR_EACH_NODE_HAS_EXACTLY_ONE_END_EDGE == errorID)
      {
         return "A ForEach node has exactly one End edge";
      } else if (Errors.INVALID_OUTGOING_EDGES == errorID)
      {
         return "A simple (non-ForEach) node has either one outgoing edge without guard or one Success and one Failure edge";
      } else if (Errors.EMBEDDED_LOOP_FOUND == errorID)
      {
         return "While iterating through nested loops, an embedded loop has been found";
      } else if (Errors.HEAD_LOOP_EXT_BWD_EDGE == errorID)
      {
         return "An outermost loop head cannot have additional external backward edges";
      } else if (Errors.SECOND_OUT_EDGE_INVALID == errorID)
      {
         return "Second outgoing edge has invalid type";
      } else if (Errors.IFTHEN_ONLY_ONE_JOIN_NODE == errorID)
      {
         return "The two branches of an if-then structure have to join in one node";
      } else if (Errors.BOTH_BRANCHES_HEAD_CONTROLLED == errorID)
      {
         return "Two head-controlled loops cannot have the same head node";
      } else if (Errors.BOTH_BRANCHES_TAIL_CONTROLLED == errorID)
      {
         return "Two tail-controlled loops cannot begin at the same node";
      } else if (Errors.FOREACH_END_EDGE_ERROR == errorID)
      {
         return "The target of the End Edge is set invalid (probably is within the ForEach loop)";
      } else if (Errors.EDGE_TARGET_UNKNOWN_TYPE == errorID)
      {
         return "The target of the edge is of unknown type";
      } else if (Errors.LOOP_EXTERN_EDGE == errorID)
      {
         return "Erroneous loop closing edge";
      } else if (Errors.THEN_ELSE_BRANCH_INVALID_LOOP_CONTAINMENT == errorID)
      {
         return "Edge in a then or else branch can only lead to the closest Loop or ForEach node";
      } else if (Errors.LOOP_CROSSING_EDGE == errorID)
      {
         return "Loop crossing edge found";
      }
      return "Unknown error";
-->

@model sortIncomingEdges (Node node) <--
      // Collections.sort(node.getIncoming(), EDGE_COMPARATOR);
-->

}