
import MocaTree.Attribute;
import MocaTree.MocaTreePackage;
import MocaTree.Node;
import MocaTree.Text;


partial class TreeElementImpl {

@members <--

   public int compareTo(final TreeElement treeElement)
   {
      int orderUsingIndices = compareWithIndices(treeElement);
      if (orderUsingIndices != 0)
         return orderUsingIndices;

      int orderUsingNames = compareWithNames(treeElement);
      if (orderUsingNames != 0)
         return orderUsingNames;

      int orderUsingSpecialAttributes = compareWithSpecialAttributes(treeElement);
      if (orderUsingSpecialAttributes != 0)
         return orderUsingSpecialAttributes;

      return compareWithChildren(treeElement);
   }

   private int compareWithChildren(final TreeElement treeElement)
   {
      if (this instanceof Node && treeElement instanceof Node)
      {
         Node thisNode = (Node) this;
         Node treeElementNode = (Node) treeElement;
         return computeChildrenHash(thisNode).compareTo(computeChildrenHash(treeElementNode));
      } else
         return 0;
   }

   private int compareWithSpecialAttributes(TreeElement treeElement)
   {
      final String[] attributeHeuristics = { "name", "id", "ID", "value" };

      if (this instanceof Node && treeElement instanceof Node)
      {
         // apply attribute heuristics
         for (final String heuristic : attributeHeuristics)
         {
            // assuming that there is one name or id, iterating therefore arbitrarily
            for (final Attribute thisAttr : ((Node) this).getAttribute(heuristic))
            {
               for (final Attribute treeElementAttr : ((Node) treeElement).getAttribute(heuristic))
               {
                  final int result = thisAttr.getValue().compareTo(treeElementAttr.getValue());
                  if (result != 0)
                     return result;
               }
            }
         }
      } else if (this instanceof Attribute && treeElement instanceof Attribute)
      {
         return ((Attribute) this).getValue().compareTo(((Attribute) treeElement).getValue());
      }

      return 0;
   }

   private int compareWithNames(final TreeElement treeElement)
   {
      if (name != null && treeElement.getName() != null)
         return name.compareTo(treeElement.getName());
      else
         return 0;
   }

   private int compareWithIndices(final TreeElement treeElement)
   {
      return new Integer(index).compareTo(treeElement.getIndex());
   }

   private Integer computeChildrenHash(final Node node)
   {
      int result = 0;

      if (node.getName() != null)
         result = node.getName().hashCode();

      for (final Text child : node.getChildren())
      {
         if (child instanceof Node)
            result += computeChildrenHash((Node) child);
         else if (child.getName() != null)
            result += child.getName().hashCode();
      }

      for (final Attribute attr : node.getAttribute())
      {
         result += attr.getName().hashCode() + attr.getValue().hashCode();
      }

      return result;
   }
   
-->

}