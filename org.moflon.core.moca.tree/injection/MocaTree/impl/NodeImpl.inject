
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;


partial class NodeImpl {

@members <--

   @Override
   public Collection<Attribute> getAttribute(String nameOfAttribute)
   {
      ArrayList<Attribute> filteredAttributes = new ArrayList<>();
      for (Attribute attr : getAttribute())
      {
         if (nameOfAttribute.equals(attr.getName()))
         {
            filteredAttributes.add(attr);
         }
      }

      return filteredAttributes;
   }

   @Override
   public Collection<Attribute> getAttribute(int indexOfAttribute)
   {
      ArrayList<Attribute> filteredAttributes = new ArrayList<>();
      for (Attribute attr : getAttribute())
      {
         if (indexOfAttribute == attr.getIndex())
         {
            filteredAttributes.add(attr);
         }
      }

      return filteredAttributes;
   }

   @Override
   public Collection<Attribute> getAttribute(String nameOfAttribute, int indexOfAttribute)
   {
      ArrayList<Attribute> filteredAttributes = new ArrayList<>();
      for (Attribute attr : getAttribute())
      {
         if (indexOfAttribute == attr.getIndex() && nameOfAttribute.equals(attr.getName()))
         {
            filteredAttributes.add(attr);
         }
      }

      return filteredAttributes;
   }

   @Override
   public Collection<Text> getChildren(String nameOfChild)
   {
      ArrayList<Text> filteredChildren = new ArrayList<>();
      for (Text child : getChildren())
      {
         if (nameOfChild.equals(child.getName()))
         {
            filteredChildren.add(child);
         }
      }

      return filteredChildren;
   }

   @Override
   public Collection<Text> getChildren(int indexOfChild)
   {
      ArrayList<Text> filteredChildren = new ArrayList<>();
      for (Text child : getChildren())
      {
         if (indexOfChild == child.getIndex())
         {
            filteredChildren.add(child);
         }
      }

      return filteredChildren;
   }

   @Override
   public Collection<Text> getChildren(String nameOfChild, int indexOfChild)
   {
      ArrayList<Text> filteredChildren = new ArrayList<>();
      for (Text child : getChildren())
      {
         if (indexOfChild == child.getIndex() && nameOfChild.equals(child.getName()))
         {
            filteredChildren.add(child);
         }
      }

      return filteredChildren;
   }
   
-->

}