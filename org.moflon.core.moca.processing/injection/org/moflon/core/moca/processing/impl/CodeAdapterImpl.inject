
import MocaTree.MocaTreeFactory;
import MocaTree.Node;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.log4j.Logger;
import org.moflon.core.utilities.LogUtils;

partial class CodeAdapterImpl {

@members <--

   private static final Logger logger = Logger.getLogger(CodeAdapterImpl.class);

   private void createSubFolder(java.io.File dir, Folder parent) throws IOException
   {
      // Skip svn metadata
      if (dir.getName().equals(".svn"))
         return;

      // Create subfolder and set parent
      Folder folder = MocaTreeFactory.eINSTANCE.createFolder();
      folder.setName(dir.getName());
      folder.setParentFolder(parent);

      // Handle contents in directory
      java.io.File[] content = dir.listFiles();
      for (java.io.File child : content)
      {
         if (child.isDirectory())
            createSubFolder(child, folder);
         else
            parseFile(child, folder);
      }
   }

   private void createFolder(Folder folder, java.io.File dir) throws IOException
   {
      dir.mkdirs();
      // Creates all files in the current folder
      for (MocaTree.File eFile : folder.getFile())
         unparseFile(eFile, dir);

      for (Folder subFolder : folder.getSubFolder())
      {
         java.io.File subDir = new java.io.File(dir, subFolder.getName());
         createFolder(subFolder, subDir);
      }
   }

   public void unparseFileToStream(MocaTree.File eFile, Writer writer)
   {
      EList<Unparser> unparsers = getUnparser();
      Unparser foundUnparser = null;
      for (Unparser unparser : unparsers)
      {
         if (unparser.canUnparseFile(eFile.getName()))
         {
            if (foundUnparser == null)
               foundUnparser = unparser;
            else
               // Complain if unparser for file is not unique
               throw new IllegalStateException("Found multiple unparsers for " + eFile.getName());
         }
      }

      // Determined contents of file
      String fileContent = "";
      if (foundUnparser == null)
         // No appropriate unparser found, switch to default handling
         // Default handling can only unparse the single root
         fileContent = StringEscapeUtils.unescapeXml(eFile.getRootNode().getName());
      else
         // Found appropriate unparser, delegate ...
         fileContent = foundUnparser.unparse(eFile.getRootNode());

      try
      {
         Writer out = new BufferedWriter(writer);
         out.write(fileContent);
         out.close();
      } catch (Exception e)
      {
         LogUtils.error(logger, e, "Unparser is unable to handle " + eFile + ": " + e);
      }
   }
   
-->

@model parse (File dir) <--
      Folder folder = MocaTreeFactory.eINSTANCE.createFolder();

      // Ensure that dir is a directory
      if (dir.isDirectory())
      {
         // Set the name for the new folder
         folder.setName(dir.getName());

         // Get files contained in dir
         java.io.File[] content = dir.listFiles();

         // Handle contents
         try
         {
            for (java.io.File child : content)
            {
               if (child.isDirectory())
               {
                  createSubFolder(child, folder);
               } else
               {
                  parseFile(child, folder);
               }
            }
         } catch (Exception e)
         {
            LogUtils.error(logger, e, "Unable to handle contents in %s.", dir);
         }
      } else
         throw new IllegalArgumentException(dir + " must be a Directory!");

      return folder;
-->

@model unparse (String path, Folder folder) <--
      java.io.File dir = new java.io.File(path, folder.getName());
      try
      {
         createFolder(folder, dir);
      } catch (IOException e)
      {
         LogUtils.error(logger, e, "Unable to unparse %s.", folder);
      }
      return dir;
-->

@model parseFile (File file, Folder parent) <--
      // Create file and set parent
      MocaTree.File efile = MocaTreeFactory.eINSTANCE.createFile();
      efile.setName(file.getName());
      efile.setFolder(parent);

      // Determine appropriate parser to handle file
      EList<Parser> parsers = getParser();
      Parser foundParser = null;
      for (Parser parser : parsers)
      {
         if (parser.canParseFile(file.getName()))
         {
            if (foundParser == null)
               foundParser = parser;
            else
               // Complain if parser for file is not unique
               throw new IllegalStateException("Found multiple parsers for " + file.getName());
         }
      }

      if (foundParser == null)
      {
         // No appropriate parser found, switch to default handling of file
         Node content = MocaTreeFactory.eINSTANCE.createNode();
         content.setFile(efile);

         BufferedReader in = null;
         try
         {
            in = new BufferedReader(new FileReader(file.getAbsoluteFile()));
            String fileContent = "";
            String str;
            while ((str = in.readLine()) != null)
               fileContent += str;

            content.setName(StringEscapeUtils.escapeXml(fileContent));
            in.close();
         } catch (Exception e)
         {
            LogUtils.error(logger, e, "Unable to extract content from " + file + ": " + e);
         }
      } else
      {
         try
         {
            // Found appropriate parser, delegate ...
            Node content = foundParser.parse(file, new FileReader(file.getAbsoluteFile()));
            content.setFile(efile);
         } catch (Exception e)
         {
            LogUtils.error(logger, e, "Parser is unable to handle " + file + ": " + e);
         }
      }

      return efile;
-->

@model unparseFile (MocaTree.File eFile, File dir) <--
      java.io.File file = new java.io.File(dir, eFile.getName());
      try
      {
         unparseFileToStream(eFile, new FileWriter(file));
      } catch (IOException e)
      {
         LogUtils.error(logger, e);
      }
-->

}