
import org.eclipse.emf.ecore.EObject;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.CommonTreeNodeStream;
import org.antlr.stringtemplate.StringTemplateGroup;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.log4j.Logger;
import org.moflon.core.utilities.LogUtils;
import org.moflon.moca.MocaUtil;
import org.moflon.moca.xml.XMLHandler;
import org.moflon.moca.xml.XMLTreeGrammar;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import org.antlr.runtime.RecognitionException;

partial class TemplateUnparserImpl {

@members <--

   private static final Logger logger = Logger.getLogger(TemplateUnparserImpl.class);

   protected abstract String[] getTokenNames();

   protected abstract StringTemplateGroup getStringTemplateGroup() throws FileNotFoundException;

   protected abstract String callMainRule(CommonTreeNodeStream tree, StringTemplateGroup stGroup) throws RecognitionException;

   /**
    * Override to control if the tree is to be sorted before unparsing or not
    * 
    * @return
    */
   protected boolean applySortingBeforeUnparsing()
   {
      return true;
   }
   
-->

@model canUnparseFile (String fileName) <--
      throw new UnsupportedOperationException();
-->

@model unparse (Node node) <--
      try
      {
         // Create Tree
         CommonTree tree = MocaUtil.mocaTreeToCommonTree(node, getTokenNames(), applySortingBeforeUnparsing());

         // Load templates
         StringTemplateGroup stGroup = getStringTemplateGroup();

         // Create and return result
         return callMainRule(new CommonTreeNodeStream(tree), stGroup);
      } catch (Exception e)
      {
         LogUtils.error(logger, e, "Unable to unparse " + node + ": " + e);
      }

      return null;
-->

}