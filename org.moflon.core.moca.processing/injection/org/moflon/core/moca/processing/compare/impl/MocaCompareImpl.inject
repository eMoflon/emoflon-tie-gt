
import org.eclipse.emf.ecore.EObject;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

partial class MocaCompareImpl {

@members <--

   private String computeId(String name, int index)
   {
      return name + "__" + index;
   }

   private HashMap<String, HashSet<TreeElement>> cachedTreeElements = new HashMap<String, HashSet<TreeElement>>();
   
-->

@model cacheRightFolder (Folder right) <--

      Iterator<EObject> it = right.eAllContents();
      while (it.hasNext())
      {
         TreeElement element = (TreeElement) it.next();
         String computedId = computeId(element.getName(), element.getIndex());
         HashSet<TreeElement> setOfElementsWithId = null;
         if (cachedTreeElements.containsKey(computedId))
            setOfElementsWithId = cachedTreeElements.get(computedId);
         else
         {
            setOfElementsWithId = new HashSet<TreeElement>();
            cachedTreeElements.put(computedId, setOfElementsWithId);
         }
         setOfElementsWithId.add(element);
      }
-->

@model getTreeElement (TreeElement parent, String name, int index) <--

      if (null == parent)
         return null;

      String computedId = computeId(name, index);
      if (cachedTreeElements.containsKey(computedId))
      {
         Collection<TreeElement> elementsWithId = cachedTreeElements.get(computedId);
         for (TreeElement temp : elementsWithId)
         {
            if (temp.eContainer() == parent)
               return temp;
         }
      }
      return null;
-->

}